/*
 * Copyright (c) 2019
 * California Department of Water Resources
 * All Rights Reserved.  DWR PROPRIETARY/CONFIDENTIAL.
 * Source may not be released without written approval from DWR
 */

/* Generated By:JavaCC: Do not edit this line. WreslParserTokenManager.java */
package calsim.wreslcoder.wresl;
//CBimport java.util.*;

//CB added to solve "...user-mapped section open..." error during parsing on some machines
//CB added

public class WreslParserTokenManager implements WreslParserConstants
{
	private static final String[] JJSTR_LITERAL_IMAGES =
			{
					"", null, null, null, null, null, null, null, null, null, null, null, null,
					null, null, null, null, null, null, null, null, null, null, null, null, null, null,
					null, null, null, null, null, null, null, null, null, null, null, null, null, null,
					null, null, null, null, null, null, null, null, "\53", "\55", "\52", "\57", null,
					null, null, "\76", "\74", "\75", "\76\75", "\74\75", "\75\75", "\57\75", null, null,
					null, null, null, null, null, null, null, null, null, null, null, null, null, null,
					null, null, null, null, null, null, null, null, null, null, null, null, null, null,
					null, null, null, null, "\173", "\175", "\133", "\135", "\50", "\54", "\51",
			};
	private static final long[] jjbitVec0 =
			{
					0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
			};
	private static final int[] JJNEXT_STATES =
			{
					42, 43, 44, 45, 37, 47, 48, 50, 51, 68, 69, 31, 33, 34, 1, 2,
					4, 86, 89, 92, 95, 98, 121, 124, 127, 130, 133, 134, 140, 145, 99, 105,
					110, 83, 114, 151, 152, 154, 155, 44, 45, 37, 71, 72, 74, 86, 89, 92,
					95, 98, 99, 105, 110, 121, 124, 127, 130, 133, 134, 140, 145, 157, 158, 159,
					79, 81, 64, 66, 60, 62, 54, 55, 57, 38, 39, 101, 102, 104, 107, 109,
					111, 113, 136, 137, 139, 142, 144, 146, 148,
			};
	private static final long[] JJTO_TOKEN = {
			0xffffffffffffff81L, 0xffa11fffffL,
	};
	static final long[] jjtoSkip = {
			0x7eL, 0x0L,
	};
	private final int[] jjrounds = new int[163];
	private final int[] jjstateSet = new int[326];
	protected char curChar;
	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;
	private ASCII_CharStream input_stream;

	public WreslParserTokenManager(ASCII_CharStream stream)
	{
		if(ASCII_CharStream.staticFlag)
		{
			throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		}
		input_stream = stream;
	}

	public WreslParserTokenManager(ASCII_CharStream stream, int lexState)
	{
		this(stream);
		SwitchTo(lexState);
	}

	private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
	{
		switch(pos)
		{
			case 0:
				if((active0 & 0x20002000000L) != 0L || (active1 & 0x2000L) != 0L)
				{
					jjmatchedKind = 93;
					return 28;
				}
				if((active0 & 0x1d19f0d1e1f80L) != 0L || (active1 & 0x318eaL) != 0L)
				{
					jjmatchedKind = 93;
					return 163;
				}
				if((active0 & 0xe0008000L) != 0L || (active1 & 0x610L) != 0L)
				{
					jjmatchedKind = 93;
					return 60;
				}
				if((active0 & 0x4010000000000000L) != 0L)
				{
					return 68;
				}
				if((active0 & 0x8000000000010000L) != 0L)
				{
					jjmatchedKind = 93;
					return 25;
				}
				if((active0 & 0xe0000000000000L) != 0L)
				{
					return 164;
				}
				if((active0 & 0x82000804000L) != 0L || (active1 & 0x100L) != 0L)
				{
					jjmatchedKind = 93;
					return 22;
				}
				if((active0 & 0x10000000L) != 0L || (active1 & 0x8000L) != 0L)
				{
					jjmatchedKind = 93;
					return 19;
				}
				if((active0 & 0x240000200000L) != 0L)
				{
					jjmatchedKind = 93;
					return 12;
				}
				if((active0 & 0x4000400000L) != 0L || (active1 & 0x4001L) != 0L)
				{
					jjmatchedKind = 93;
					return 64;
				}
				if((active1 & 0x4L) != 0L)
				{
					jjmatchedKind = 93;
					return 79;
				}
				return -1;
			case 1:
				if((active0 & 0x20000000L) != 0L || (active1 & 0x200L) != 0L)
				{
					jjmatchedKind = 93;
					jjmatchedPos = 1;
					return 61;
				}
				if((active0 & 0x8001f9ffdd5f9f80L) != 0L || (active1 & 0x3fdffL) != 0L)
				{
					jjmatchedKind = 93;
					jjmatchedPos = 1;
					return 163;
				}
				if((active0 & 0x804000L) != 0L)
				{
					jjmatchedKind = 93;
					jjmatchedPos = 1;
					return 21;
				}
				if((active0 & 0x40000200000L) != 0L)
				{
					jjmatchedKind = 93;
					jjmatchedPos = 1;
					return 11;
				}
				if((active0 & 0x20002000000L) != 0L)
				{
					jjmatchedKind = 93;
					jjmatchedPos = 1;
					return 27;
				}
				return -1;
			case 2:
				if((active0 & 0x1082460008780L) != 0L || (active1 & 0xef3L) != 0L)
				{
					return 163;
				}
				if((active0 & 0x8000f3db9fdf5800L) != 0L || (active1 & 0x3f10cL) != 0L)
				{
					if(jjmatchedPos != 2)
					{
						jjmatchedKind = 93;
						jjmatchedPos = 2;
					}
					return 163;
				}
				if((active0 & 0x40000200000L) != 0L)
				{
					if(jjmatchedPos != 2)
					{
						jjmatchedKind = 93;
						jjmatchedPos = 2;
					}
					return 10;
				}
				return -1;
			case 3:
				if((active0 & 0x218092080000L) != 0L || (active1 & 0x210cL) != 0L)
				{
					return 163;
				}
				if((active0 & 0x8001d65b6df7d800L) != 0L || (active1 & 0x3d080L) != 0L)
				{
					if(jjmatchedPos != 3)
					{
						jjmatchedKind = 93;
						jjmatchedPos = 3;
					}
					return 163;
				}
				return -1;
			case 4:
				if((active0 & 0x800117536ca25800L) != 0L || (active1 & 0x28000L) != 0L)
				{
					jjmatchedKind = 93;
					jjmatchedPos = 4;
					return 163;
				}
				if((active0 & 0xc00801558000L) != 0L || (active1 & 0x15080L) != 0L)
				{
					return 163;
				}
				return -1;
			case 5:
				if((active0 & 0x8001150268225800L) != 0L || (active1 & 0x8000L) != 0L)
				{
					jjmatchedKind = 93;
					jjmatchedPos = 5;
					return 163;
				}
				if((active0 & 0x25104800000L) != 0L || (active1 & 0x20000L) != 0L)
				{
					return 163;
				}
				return -1;
			case 6:
				if((active0 & 0x1010260221000L) != 0L)
				{
					return 163;
				}
				if((active0 & 0x8000140008004800L) != 0L || (active1 & 0x8000L) != 0L)
				{
					jjmatchedKind = 93;
					jjmatchedPos = 6;
					return 163;
				}
				return -1;
			case 7:
				if((active0 & 0x8000040008000800L) != 0L || (active1 & 0x8000L) != 0L)
				{
					jjmatchedKind = 93;
					jjmatchedPos = 7;
					return 163;
				}
				if((active0 & 0x100000004000L) != 0L)
				{
					return 163;
				}
				return -1;
			case 8:
				if((active0 & 0x8000000L) != 0L)
				{
					jjmatchedKind = 93;
					jjmatchedPos = 8;
					return 163;
				}
				if((active0 & 0x8000040000000800L) != 0L || (active1 & 0x8000L) != 0L)
				{
					return 163;
				}
				return -1;
			default:
				return -1;
		}
	}

	private final int jjStartNfa_0(int pos, long active0, long active1)
	{
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
	}

	private final int jjStopAtPos(int pos, int kind)
	{
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private final int jjStartNfaWithStates_0(int pos, int kind, int state)
	{
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try
		{
			curChar = input_stream.readChar();
		}
		catch(java.io.IOException e)
		{
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	private final int jjMoveStringLiteralDfa0_0()
	{
		switch(curChar)
		{
			case 40:
				return jjStopAtPos(0, 101);
			case 41:
				return jjStopAtPos(0, 103);
			case 42:
				return jjStopAtPos(0, 51);
			case 43:
				return jjStopAtPos(0, 49);
			case 44:
				return jjStopAtPos(0, 102);
			case 45:
				return jjStopAtPos(0, 50);
			case 46:
				return jjMoveStringLiteralDfa1_0(0xe0000000000000L, 0x0L);
			case 47:
				jjmatchedKind = 52;
				return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
			case 60:
				jjmatchedKind = 57;
				return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
			case 61:
				jjmatchedKind = 58;
				return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
			case 62:
				jjmatchedKind = 56;
				return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
			case 91:
				return jjStopAtPos(0, 99);
			case 93:
				return jjStopAtPos(0, 100);
			case 65:
			case 97:
				return jjMoveStringLiteralDfa1_0(0x4000400000L, 0x4001L);
			case 67:
			case 99:
				return jjMoveStringLiteralDfa1_0(0x240000200000L, 0x0L);
			case 68:
			case 100:
				return jjMoveStringLiteralDfa1_0(0x20002000000L, 0x2000L);
			case 69:
			case 101:
				return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x20L);
			case 70:
			case 102:
				return jjMoveStringLiteralDfa1_0(0x10000000L, 0x8000L);
			case 71:
			case 103:
				return jjMoveStringLiteralDfa1_0(0x18800000000L, 0x20000L);
			case 72:
			case 104:
				return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
			case 73:
			case 105:
				return jjMoveStringLiteralDfa1_0(0x1000000020000L, 0x2L);
			case 75:
			case 107:
				return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
			case 76:
			case 108:
				return jjMoveStringLiteralDfa1_0(0x400100000680L, 0x100c0L);
			case 77:
			case 109:
				return jjMoveStringLiteralDfa1_0(0xe0008000L, 0x610L);
			case 78:
			case 110:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
			case 79:
			case 111:
				return jjMoveStringLiteralDfa1_0(0x8000000000010000L, 0x0L);
			case 80:
			case 112:
				return jjMoveStringLiteralDfa1_0(0x1000L, 0x800L);
			case 82:
			case 114:
				return jjMoveStringLiteralDfa1_0(0x1000000100L, 0x1008L);
			case 83:
			case 115:
				return jjMoveStringLiteralDfa1_0(0x82000804000L, 0x100L);
			case 84:
			case 116:
				return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
			case 85:
			case 117:
				return jjMoveStringLiteralDfa1_0(0x800600100800L, 0x0L);
			case 86:
			case 118:
				return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
			case 87:
			case 119:
				return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
			case 123:
				return jjStopAtPos(0, 97);
			case 125:
				return jjStopAtPos(0, 98);
			default:
				return jjMoveNfa_0(0, 0);
		}
	}

	private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
	{
		try
		{
			curChar = input_stream.readChar();
		}
		catch(java.io.IOException e)
		{
			jjStopStringLiteralDfa_0(0, active0, active1);
			return 1;
		}
		switch(curChar)
		{
			case 61:
				if((active0 & 0x800000000000000L) != 0L)
				{
					return jjStopAtPos(1, 59);
				}
				else if((active0 & 0x1000000000000000L) != 0L)
				{
					return jjStopAtPos(1, 60);
				}
				else if((active0 & 0x2000000000000000L) != 0L)
				{
					return jjStopAtPos(1, 61);
				}
				else if((active0 & 0x4000000000000000L) != 0L)
				{
					return jjStopAtPos(1, 62);
				}
				break;
			case 65:
			case 97:
				return jjMoveStringLiteralDfa2_0(active0, 0x20200020040000L, active1, 0x3200L);
			case 66:
			case 98:
				return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x1L);
			case 69:
			case 101:
				return jjMoveStringLiteralDfa2_0(active0, 0x21086805000L, active1, 0x8L);
			case 72:
			case 104:
				return jjMoveStringLiteralDfa2_0(active0, 0x1000780L, active1, 0L);
			case 73:
			case 105:
				return jjMoveStringLiteralDfa2_0(active0, 0x948080000L, active1, 0x8404L);
			case 76:
			case 108:
				return jjMoveStringLiteralDfa2_0(active0, 0x4000400000L, active1, 0x20000L);
			case 78:
			case 110:
				return jjMoveStringLiteralDfa2_0(active0, 0x81000200120800L, active1, 0x2L);
			case 79:
			case 111:
				return jjMoveStringLiteralDfa2_0(active0, 0x40458000208000L, active1, 0x108d0L);
			case 80:
			case 112:
				return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
			case 81:
			case 113:
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
			case 82:
			case 114:
				return jjMoveStringLiteralDfa2_0(active0, 0x10010000L, active1, 0x4000L);
			case 83:
			case 115:
				return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
			case 84:
			case 116:
				return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
			case 85:
			case 117:
				return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
			case 88:
			case 120:
				return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x20L);
			default:
				break;
		}
		return jjStartNfa_0(0, active0, active1);
	}

	private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
	{
		if(((active0 &= old0) | (active1 &= old1)) == 0L)
		{
			return jjStartNfa_0(0, old0, old1);
		}
		try
		{
			curChar = input_stream.readChar();
		}
		catch(java.io.IOException e)
		{
			jjStopStringLiteralDfa_0(1, active0, active1);
			return 2;
		}
		switch(curChar)
		{
			case 65:
			case 97:
				return jjMoveStringLiteralDfa3_0(active0, 0x18084000000L, active1, 0x8L);
			case 66:
			case 98:
				return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
			case 67:
			case 99:
				return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0x10000L);
			case 68:
			case 100:
				if((active0 & 0x2000000000L) != 0L)
				{
					return jjStartNfaWithStates_0(2, 37, 163);
				}
				else if((active1 & 0x10L) != 0L)
				{
					jjmatchedKind = 68;
					jjmatchedPos = 2;
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x18000L, active1, 0L);
			case 69:
			case 101:
				if((active0 & 0x400000000L) != 0L)
				{
					return jjStartNfaWithStates_0(2, 34, 163);
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
			case 70:
			case 102:
				return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
			case 71:
			case 103:
				if((active1 & 0x40L) != 0L)
				{
					jjmatchedKind = 70;
					jjmatchedPos = 2;
				}
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L);
			case 73:
			case 105:
				return jjMoveStringLiteralDfa3_0(active0, 0x500000L, active1, 0L);
			case 74:
			case 106:
				return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
			case 75:
			case 107:
				return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
			case 76:
			case 108:
				return jjMoveStringLiteralDfa3_0(active0, 0x840000L, active1, 0x8000L);
			case 77:
			case 109:
				if((active0 & 0x80000000000L) != 0L)
				{
					return jjStartNfaWithStates_0(2, 43, 163);
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
			case 78:
			case 110:
				if((active1 & 0x400L) != 0L)
				{
					jjmatchedKind = 74;
					jjmatchedPos = 2;
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x20040140281000L, active1, 0x1004L);
			case 79:
			case 111:
				return jjMoveStringLiteralDfa3_0(active0, 0x80000010000000L, active1, 0x20000L);
			case 80:
			case 112:
				if((active1 & 0x20L) != 0L)
				{
					return jjStartNfaWithStates_0(2, 69, 163);
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
			case 81:
			case 113:
				return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L);
			case 82:
			case 114:
				return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0x4100L);
			case 83:
			case 115:
				if((active0 & 0x80L) != 0L)
				{
					jjmatchedKind = 7;
					jjmatchedPos = 2;
				}
				else if((active0 & 0x100L) != 0L)
				{
					return jjStartNfaWithStates_0(2, 8, 163);
				}
				else if((active1 & 0x1L) != 0L)
				{
					return jjStartNfaWithStates_0(2, 64, 163);
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x201002000600L, active1, 0L);
			case 84:
			case 116:
				if((active1 & 0x2L) != 0L)
				{
					jjmatchedKind = 65;
					jjmatchedPos = 2;
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x1100000000000L, active1, 0x2000L);
			case 86:
			case 118:
				return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
			case 87:
			case 119:
				if((active1 & 0x800L) != 0L)
				{
					return jjStartNfaWithStates_0(2, 75, 163);
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x404000000000L, active1, 0L);
			case 88:
			case 120:
				if((active1 & 0x200L) != 0L)
				{
					jjmatchedKind = 73;
					jjmatchedPos = 2;
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
			default:
				break;
		}
		return jjStartNfa_0(1, active0, active1);
	}

	private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
	{
		if(((active0 &= old0) | (active1 &= old1)) == 0L)
		{
			return jjStartNfa_0(1, old0, old1);
		}
		try
		{
			curChar = input_stream.readChar();
		}
		catch(java.io.IOException e)
		{
			jjStopStringLiteralDfa_0(2, active0, active1);
			return 3;
		}
		switch(curChar)
		{
			case 46:
				if((active0 & 0x40000000000000L) != 0L)
				{
					return jjStopAtPos(3, 54);
				}
				break;
			case 49:
				return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
			case 60:
				return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0L);
			case 62:
				return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
			case 65:
			case 97:
				return jjMoveStringLiteralDfa4_0(active0, 0x4000401000L, active1, 0x14000L);
			case 66:
			case 98:
				return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L);
			case 67:
			case 99:
				if((active0 & 0x2000000L) != 0L)
				{
					return jjStartNfaWithStates_0(3, 25, 163);
				}
				break;
			case 68:
			case 100:
				if((active0 & 0x80000L) != 0L)
				{
					return jjStartNfaWithStates_0(3, 19, 163);
				}
				return jjMoveStringLiteralDfa4_0(active0, 0x20040004000000L, active1, 0L);
			case 69:
			case 101:
				if((active0 & 0x200000000000L) != 0L)
				{
					return jjStartNfaWithStates_0(3, 45, 163);
				}
				else if((active1 & 0x2000L) != 0L)
				{
					return jjStartNfaWithStates_0(3, 77, 163);
				}
				return jjMoveStringLiteralDfa4_0(active0, 0x8001d00908818000L, active1, 0L);
			case 71:
			case 103:
				return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000L);
			case 73:
			case 105:
				return jjMoveStringLiteralDfa4_0(active0, 0x20060000000L, active1, 0L);
			case 76:
			case 108:
				if((active0 & 0x8000000000L) != 0L)
				{
					jjmatchedKind = 39;
					jjmatchedPos = 3;
				}
				else if((active1 & 0x8L) != 0L)
				{
					return jjStartNfaWithStates_0(3, 67, 163);
				}
				return jjMoveStringLiteralDfa4_0(active0, 0x10000020000L, active1, 0x8000L);
			case 77:
			case 109:
				if((active0 & 0x10000000L) != 0L)
				{
					return jjStartNfaWithStates_0(3, 28, 163);
				}
				break;
			case 78:
			case 110:
				if((active0 & 0x80000000L) != 0L)
				{
					return jjStartNfaWithStates_0(3, 31, 163);
				}
				return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L);
			case 79:
			case 111:
				return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0L);
			case 82:
			case 114:
				return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L);
			case 84:
			case 116:
				if((active1 & 0x4L) != 0L)
				{
					return jjStartNfaWithStates_0(3, 66, 163);
				}
				else if((active1 & 0x100L) != 0L)
				{
					return jjStartNfaWithStates_0(3, 72, 163);
				}
				return jjMoveStringLiteralDfa4_0(active0, 0x80000000100000L, active1, 0L);
			case 85:
			case 117:
				return jjMoveStringLiteralDfa4_0(active0, 0x1000044000L, active1, 0L);
			case 86:
			case 118:
				return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
			default:
				break;
		}
		return jjStartNfa_0(2, active0, active1);
	}

	private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
	{
		if(((active0 &= old0) | (active1 &= old1)) == 0L)
		{
			return jjStartNfa_0(2, old0, old1);
		}
		try
		{
			curChar = input_stream.readChar();
		}
		catch(java.io.IOException e)
		{
			jjStopStringLiteralDfa_0(3, active0, active1);
			return 4;
		}
		switch(curChar)
		{
			case 46:
				if((active0 & 0x20000000000000L) != 0L)
				{
					return jjStopAtPos(4, 53);
				}
				else if((active0 & 0x80000000000000L) != 0L)
				{
					return jjStopAtPos(4, 55);
				}
				break;
			case 48:
				if((active1 & 0x80L) != 0L)
				{
					return jjStartNfaWithStates_0(4, 71, 163);
				}
				break;
			case 65:
			case 97:
				return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0x28000L);
			case 67:
			case 99:
				return jjMoveStringLiteralDfa5_0(active0, 0x8000000000800000L, active1, 0L);
			case 69:
			case 101:
				if((active0 & 0x40000L) != 0L)
				{
					return jjStartNfaWithStates_0(4, 18, 163);
				}
				else if((active0 & 0x1000000L) != 0L)
				{
					return jjStartNfaWithStates_0(4, 24, 163);
				}
				else if((active1 & 0x1000L) != 0L)
				{
					return jjStartNfaWithStates_0(4, 76, 163);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x4204000L, active1, 0L);
			case 71:
			case 103:
				return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);
			case 73:
			case 105:
				return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
			case 76:
			case 108:
				if((active0 & 0x8000L) != 0L)
				{
					return jjStartNfaWithStates_0(4, 15, 163);
				}
				else if((active1 & 0x10000L) != 0L)
				{
					return jjStartNfaWithStates_0(4, 80, 163);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x1000001000L, active1, 0L);
			case 77:
			case 109:
				return jjMoveStringLiteralDfa5_0(active0, 0x60000000L, active1, 0L);
			case 78:
			case 110:
				if((active0 & 0x800000000L) != 0L)
				{
					return jjStartNfaWithStates_0(4, 35, 163);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0L);
			case 79:
			case 111:
				return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L);
			case 82:
			case 114:
				if((active0 & 0x10000L) != 0L)
				{
					return jjStartNfaWithStates_0(4, 16, 163);
				}
				else if((active0 & 0x400000000000L) != 0L)
				{
					return jjStartNfaWithStates_0(4, 46, 163);
				}
				else if((active0 & 0x800000000000L) != 0L)
				{
					return jjStartNfaWithStates_0(4, 47, 163);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x100000000600L, active1, 0L);
			case 83:
			case 115:
				if((active0 & 0x100000L) != 0L)
				{
					return jjStartNfaWithStates_0(4, 20, 163);
				}
				else if((active0 & 0x400000L) != 0L)
				{
					return jjStartNfaWithStates_0(4, 22, 163);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x10008000000L, active1, 0L);
			case 85:
			case 117:
				return jjMoveStringLiteralDfa5_0(active0, 0x20800L, active1, 0L);
			case 89:
			case 121:
				if((active1 & 0x4000L) != 0L)
				{
					return jjStartNfaWithStates_0(4, 78, 163);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0L);
			default:
				break;
		}
		return jjStartNfa_0(3, active0, active1);
	}

	private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
	{
		if(((active0 &= old0) | (active1 &= old1)) == 0L)
		{
			return jjStartNfa_0(3, old0, old1);
		}
		try
		{
			curChar = input_stream.readChar();
		}
		catch(java.io.IOException e)
		{
			jjStopStringLiteralDfa_0(4, active0, active1);
			return 5;
		}
		switch(curChar)
		{
			case 68:
			case 100:
				return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0L);
			case 69:
			case 101:
				if((active0 & 0x20000000000L) != 0L)
				{
					return jjStartNfaWithStates_0(5, 41, 163);
				}
				return jjMoveStringLiteralDfa6_0(active0, 0x1010008000000L, active1, 0L);
			case 72:
			case 104:
				return jjMoveStringLiteralDfa6_0(active0, 0x600L, active1, 0L);
			case 76:
			case 108:
				if((active1 & 0x20000L) != 0L)
				{
					return jjStartNfaWithStates_0(5, 81, 163);
				}
				break;
			case 78:
			case 110:
				return jjMoveStringLiteralDfa6_0(active0, 0x100000004800L, active1, 0L);
			case 82:
			case 114:
				if((active0 & 0x4000000L) != 0L)
				{
					return jjStartNfaWithStates_0(5, 26, 163);
				}
				else if((active0 & 0x100000000L) != 0L)
				{
					return jjStartNfaWithStates_0(5, 32, 163);
				}
				return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0x8000L);
			case 83:
			case 115:
				if((active0 & 0x4000000000L) != 0L)
				{
					return jjStartNfaWithStates_0(5, 38, 163);
				}
				break;
			case 84:
			case 116:
				if((active0 & 0x800000L) != 0L)
				{
					return jjStartNfaWithStates_0(5, 23, 163);
				}
				else if((active0 & 0x1000000000L) != 0L)
				{
					return jjStartNfaWithStates_0(5, 36, 163);
				}
				return jjMoveStringLiteralDfa6_0(active0, 0x8000040000001000L, active1, 0L);
			case 85:
			case 117:
				return jjMoveStringLiteralDfa6_0(active0, 0x60000000L, active1, 0L);
			case 87:
			case 119:
				return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L);
			default:
				break;
		}
		return jjStartNfa_0(4, active0, active1);
	}

	private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
	{
		if(((active0 &= old0) | (active1 &= old1)) == 0L)
		{
			return jjStartNfa_0(4, old0, old1);
		}
		try
		{
			curChar = input_stream.readChar();
		}
		catch(java.io.IOException e)
		{
			jjStopStringLiteralDfa_0(5, active0, active1);
			return 6;
		}
		switch(curChar)
		{
			case 65:
			case 97:
				return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L);
			case 67:
			case 99:
				return jjMoveStringLiteralDfa7_0(active0, 0x4000L, active1, 0L);
			case 68:
			case 100:
				return jjMoveStringLiteralDfa7_0(active0, 0x800L, active1, 0L);
			case 69:
			case 101:
				if((active0 & 0x20000L) != 0L)
				{
					return jjStartNfaWithStates_0(6, 17, 163);
				}
				break;
			case 73:
			case 105:
				return jjMoveStringLiteralDfa7_0(active0, 0x8000040000000000L, active1, 0L);
			case 77:
			case 109:
				if((active0 & 0x20000000L) != 0L)
				{
					return jjStartNfaWithStates_0(6, 29, 163);
				}
				else if((active0 & 0x40000000L) != 0L)
				{
					return jjStartNfaWithStates_0(6, 30, 163);
				}
				break;
			case 78:
			case 110:
				if((active0 & 0x200000000L) != 0L)
				{
					return jjStartNfaWithStates_0(6, 33, 163);
				}
				break;
			case 82:
			case 114:
				if((active0 & 0x1000000000000L) != 0L)
				{
					return jjStartNfaWithStates_0(6, 48, 163);
				}
				return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0x8000L);
			case 83:
			case 115:
				if((active0 & 0x200L) != 0L)
				{
					return jjStopAtPos(6, 9);
				}
				else if((active0 & 0x400L) != 0L)
				{
					return jjStopAtPos(6, 10);
				}
				break;
			case 84:
			case 116:
				if((active0 & 0x200000L) != 0L)
				{
					return jjStartNfaWithStates_0(6, 21, 163);
				}
				else if((active0 & 0x10000000000L) != 0L)
				{
					return jjStartNfaWithStates_0(6, 40, 163);
				}
				break;
			case 89:
			case 121:
				if((active0 & 0x1000L) != 0L)
				{
					return jjStartNfaWithStates_0(6, 12, 163);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(5, active0, active1);
	}

	private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
	{
		if(((active0 &= old0) | (active1 &= old1)) == 0L)
		{
			return jjStartNfa_0(5, old0, old1);
		}
		try
		{
			curChar = input_stream.readChar();
		}
		catch(java.io.IOException e)
		{
			jjStopStringLiteralDfa_0(6, active0, active1);
			return 7;
		}
		switch(curChar)
		{
			case 65:
			case 97:
				return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000L);
			case 69:
			case 101:
				if((active0 & 0x4000L) != 0L)
				{
					return jjStartNfaWithStates_0(7, 14, 163);
				}
				return jjMoveStringLiteralDfa8_0(active0, 0x800L, active1, 0L);
			case 73:
			case 105:
				return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0L);
			case 76:
			case 108:
				if((active0 & 0x100000000000L) != 0L)
				{
					return jjStartNfaWithStates_0(7, 44, 163);
				}
				break;
			case 79:
			case 111:
				return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0L);
			case 86:
			case 118:
				return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L);
			default:
				break;
		}
		return jjStartNfa_0(6, active0, active1);
	}

	private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
	{
		if(((active0 &= old0) | (active1 &= old1)) == 0L)
		{
			return jjStartNfa_0(6, old0, old1);
		}
		try
		{
			curChar = input_stream.readChar();
		}
		catch(java.io.IOException e)
		{
			jjStopStringLiteralDfa_0(7, active0, active1);
			return 8;
		}
		switch(curChar)
		{
			case 68:
			case 100:
				if((active0 & 0x800L) != 0L)
				{
					return jjStartNfaWithStates_0(8, 11, 163);
				}
				break;
			case 69:
			case 101:
				if((active0 & 0x8000000000000000L) != 0L)
				{
					return jjStartNfaWithStates_0(8, 63, 163);
				}
				return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L);
			case 78:
			case 110:
				if((active0 & 0x40000000000L) != 0L)
				{
					return jjStartNfaWithStates_0(8, 42, 163);
				}
				break;
			case 89:
			case 121:
				if((active1 & 0x8000L) != 0L)
				{
					return jjStartNfaWithStates_0(8, 79, 163);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(7, active0, active1);
	}

	private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
	{
		if(((active0 &= old0) | (active1 &= old1)) == 0L)
		{
			return jjStartNfa_0(7, old0, old1);
		}
		try
		{
			curChar = input_stream.readChar();
		}
		catch(java.io.IOException e)
		{
			jjStopStringLiteralDfa_0(8, active0, 0L);
			return 9;
		}
		switch(curChar)
		{
			case 83:
			case 115:
				if((active0 & 0x8000000L) != 0L)
				{
					return jjStartNfaWithStates_0(9, 27, 163);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(8, active0, 0L);
	}

	private final void jjCheckNAdd(int state)
	{
		if(jjrounds[state] != jjround)
		{
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private final void jjAddStates(int start, int end)
	{
		do
		{
			jjstateSet[jjnewStateCnt++] = JJNEXT_STATES[start];
		} while(start++ != end);
	}

	private final void jjCheckNAddTwoStates(int state1, int state2)
	{
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private final void jjCheckNAddStates(int start, int end)
	{
		do
		{
			jjCheckNAdd(JJNEXT_STATES[start]);
		} while(start++ != end);
	}

	private final void jjCheckNAddStates(int start)
	{
		jjCheckNAdd(JJNEXT_STATES[start]);
		jjCheckNAdd(JJNEXT_STATES[start + 1]);
	}

	private final int jjMoveNfa_0(int startState, int curPos)
	{
		int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 163;
		int i = 1;
		jjstateSet[0] = startState;
		int j, kind = 0x7fffffff;
		for(; ; )
		{
			if(++jjround == 0x7fffffff)
			{
				ReInitRounds();
			}
			if(curChar < 64)
			{
				long l = 1L << curChar;
				MatchLoop:
				do
				{
					switch(jjstateSet[--i])
					{
						case 28:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							else if(curChar == 46)
							{
								jjstateSet[jjnewStateCnt++] = 160;
							}
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							break;
						case 21:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							else if(curChar == 46)
							{
								jjstateSet[jjnewStateCnt++] = 160;
							}
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							break;
						case 10:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							else if(curChar == 46)
							{
								jjstateSet[jjnewStateCnt++] = 160;
							}
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							break;
						case 11:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							else if(curChar == 46)
							{
								jjstateSet[jjnewStateCnt++] = 160;
							}
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							break;
						case 79:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							else if(curChar == 46)
							{
								jjstateSet[jjnewStateCnt++] = 160;
							}
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							break;
						case 0:
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 88)
								{
									kind = 88;
								}
								jjCheckNAddStates(0, 8);
							}
							else if(curChar == 47)
							{
								jjAddStates(9, 10);
							}
							else if(curChar == 46)
							{
								jjCheckNAddTwoStates(36, 40);
							}
							else if(curChar == 39)
							{
								jjCheckNAddStates(11, 13);
							}
							else if(curChar == 33)
							{
								jjCheckNAddStates(14, 16);
							}
							if((0x3fe000000000000L & l) != 0L)
							{
								jjCheckNAddStates(17, 32);
							}
							else if(curChar == 48)
							{
								jjAddStates(33, 34);
							}
							if((0x6000000000000L & l) != 0L)
							{
								jjAddStates(35, 36);
							}
							else if(curChar == 51)
							{
								jjAddStates(37, 38);
							}
							break;
						case 25:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							else if(curChar == 46)
							{
								jjstateSet[jjnewStateCnt++] = 160;
							}
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							break;
						case 68:
							if(curChar == 42)
							{
								jjCheckNAddTwoStates(70, 71);
							}
							else if(curChar == 47)
							{
								jjCheckNAddStates(14, 16);
							}
							break;
						case 19:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							else if(curChar == 46)
							{
								jjstateSet[jjnewStateCnt++] = 160;
							}
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							break;
						case 22:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							else if(curChar == 46)
							{
								jjstateSet[jjnewStateCnt++] = 160;
							}
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							break;
						case 164:
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 88)
								{
									kind = 88;
								}
								jjCheckNAdd(40);
							}
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 88)
								{
									kind = 88;
								}
								jjCheckNAddTwoStates(36, 37);
							}
							break;
						case 12:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							else if(curChar == 46)
							{
								jjstateSet[jjnewStateCnt++] = 160;
							}
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							break;
						case 60:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							else if(curChar == 46)
							{
								jjstateSet[jjnewStateCnt++] = 160;
							}
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							break;
						case 27:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							else if(curChar == 46)
							{
								jjstateSet[jjnewStateCnt++] = 160;
							}
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							break;
						case 61:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							else if(curChar == 46)
							{
								jjstateSet[jjnewStateCnt++] = 160;
							}
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							break;
						case 163:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							else if(curChar == 46)
							{
								jjstateSet[jjnewStateCnt++] = 160;
							}
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							break;
						case 64:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							else if(curChar == 46)
							{
								jjstateSet[jjnewStateCnt++] = 160;
							}
							if((0x3ff000000000000L & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							break;
						case 1:
							if((0xffffffffffffdbffL & l) != 0L)
							{
								jjCheckNAddStates(14, 16);
							}
							break;
						case 2:
							if((0x2400L & l) != 0L && kind > 5)
							{
								kind = 5;
							}
							break;
						case 3:
							if(curChar == 10 && kind > 5)
							{
								kind = 5;
							}
							break;
						case 4:
							if(curChar == 13)
							{
								jjstateSet[jjnewStateCnt++] = 3;
							}
							break;
						case 15:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 16;
							}
							break;
						case 16:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 17;
							}
							break;
						case 17:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 18;
							}
							break;
						case 18:
							if((0x3ff000000000000L & l) != 0L && kind > 83)
							{
								kind = 83;
							}
							break;
						case 30:
						case 32:
							if(curChar == 39)
							{
								jjCheckNAddStates(11, 13);
							}
							break;
						case 31:
							if((0xffffff7fffffffffL & l) != 0L)
							{
								jjCheckNAddStates(11, 13);
							}
							break;
						case 34:
							if(curChar == 39 && kind > 95)
							{
								kind = 95;
							}
							break;
						case 35:
							if(curChar == 46)
							{
								jjCheckNAddTwoStates(36, 40);
							}
							break;
						case 36:
							if((0x3ff000000000000L & l) == 0L)
							{
								break;
							}
							if(kind > 88)
							{
								kind = 88;
							}
							jjCheckNAddTwoStates(36, 37);
							break;
						case 38:
							if((0x280000000000L & l) != 0L)
							{
								jjCheckNAdd(39);
							}
							break;
						case 39:
							if((0x3ff000000000000L & l) == 0L)
							{
								break;
							}
							if(kind > 88)
							{
								kind = 88;
							}
							jjCheckNAdd(39);
							break;
						case 40:
							if((0x3ff000000000000L & l) == 0L)
							{
								break;
							}
							if(kind > 88)
							{
								kind = 88;
							}
							jjCheckNAdd(40);
							break;
						case 41:
							if((0x3ff000000000000L & l) == 0L)
							{
								break;
							}
							if(kind > 88)
							{
								kind = 88;
							}
							jjCheckNAddStates(0, 8);
							break;
						case 42:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(42, 43);
							}
							break;
						case 43:
							if(curChar != 46)
							{
								break;
							}
							if(kind > 88)
							{
								kind = 88;
							}
							jjCheckNAdd(37);
							break;
						case 44:
							if((0x3ff000000000000L & l) == 0L)
							{
								break;
							}
							if(kind > 88)
							{
								kind = 88;
							}
							jjCheckNAddStates(39, 41);
							break;
						case 45:
							if(curChar == 46)
							{
								jjCheckNAdd(46);
							}
							break;
						case 46:
							if((0x3ff000000000000L & l) == 0L)
							{
								break;
							}
							if(kind > 88)
							{
								kind = 88;
							}
							jjCheckNAddTwoStates(46, 37);
							break;
						case 47:
							if((0x3ff000000000000L & l) == 0L)
							{
								break;
							}
							if(kind > 88)
							{
								kind = 88;
							}
							jjCheckNAddTwoStates(47, 48);
							break;
						case 48:
							if(curChar == 46)
							{
								jjCheckNAdd(49);
							}
							break;
						case 49:
							if((0x3ff000000000000L & l) == 0L)
							{
								break;
							}
							if(kind > 88)
							{
								kind = 88;
							}
							jjCheckNAdd(49);
							break;
						case 50:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(50, 51);
							}
							break;
						case 51:
							if(curChar == 46 && kind > 88)
							{
								kind = 88;
							}
							break;
						case 67:
							if(curChar == 47)
							{
								jjAddStates(9, 10);
							}
							break;
						case 69:
							if(curChar == 42)
							{
								jjCheckNAddTwoStates(70, 71);
							}
							break;
						case 70:
							if((0xfffffbffffffffffL & l) != 0L)
							{
								jjCheckNAddTwoStates(70, 71);
							}
							break;
						case 71:
							if(curChar == 42)
							{
								jjCheckNAddStates(42, 44);
							}
							break;
						case 72:
							if((0xffff7bffffffffffL & l) != 0L)
							{
								jjCheckNAddTwoStates(73, 71);
							}
							break;
						case 73:
							if((0xfffffbffffffffffL & l) != 0L)
							{
								jjCheckNAddTwoStates(73, 71);
							}
							break;
						case 74:
							if(curChar == 47 && kind > 6)
							{
								kind = 6;
							}
							break;
						case 82:
							if(curChar == 48)
							{
								jjAddStates(33, 34);
							}
							break;
						case 83:
							if((0x3fe000000000000L & l) != 0L)
							{
								jjCheckNAddStates(45, 52);
							}
							break;
						case 114:
							if((0x3fe000000000000L & l) != 0L)
							{
								jjCheckNAddStates(53, 60);
							}
							break;
						case 116:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 117;
							}
							break;
						case 117:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 118;
							}
							break;
						case 118:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 119;
							}
							break;
						case 119:
							if((0x3ff000000000000L & l) != 0L && kind > 84)
							{
								kind = 84;
							}
							break;
						case 149:
							if((0x3fe000000000000L & l) != 0L)
							{
								jjCheckNAddStates(17, 32);
							}
							break;
						case 150:
							if((0x6000000000000L & l) != 0L)
							{
								jjAddStates(35, 36);
							}
							break;
						case 151:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddStates(45, 52);
							}
							break;
						case 152:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddStates(53, 60);
							}
							break;
						case 153:
							if(curChar == 51)
							{
								jjAddStates(37, 38);
							}
							break;
						case 154:
							if((0x3000000000000L & l) != 0L)
							{
								jjCheckNAddStates(45, 52);
							}
							break;
						case 155:
							if((0x3000000000000L & l) != 0L)
							{
								jjCheckNAddStates(53, 60);
							}
							break;
						case 157:
							if((0x3ff000000000000L & l) == 0L)
							{
								break;
							}
							if(kind > 93)
							{
								kind = 93;
							}
							jjCheckNAdd(157);
							break;
						case 158:
							if((0x3ff000000000000L & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							break;
						case 159:
							if(curChar == 46)
							{
								jjstateSet[jjnewStateCnt++] = 160;
							}
							break;
						default:
							break;
					}
				} while(i != startsAt);
			}
			else if(curChar < 128)
			{
				long l = 1L << (curChar & 077);
				MatchLoop:
				do
				{
					switch(jjstateSet[--i])
					{
						case 28:
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							if((0x2000000020L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 27;
							}
							break;
						case 21:
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							if((0x1000000010000L & l) != 0L)
							{
								jjCheckNAdd(15);
							}
							break;
						case 10:
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							if((0x8000000080000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 9;
							}
							break;
						case 11:
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							if((0x400000004000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 10;
							}
							break;
						case 79:
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							if((0x800000008000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 80;
							}
							else if((0x2000000020L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 78;
							}
							break;
						case 0:
							if((0x7fffffe07fffffeL & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAddStates(61, 63);
							}
							if((0x400000004000L & l) != 0L)
							{
								jjAddStates(64, 65);
							}
							else if((0x200000002L & l) != 0L)
							{
								jjAddStates(66, 67);
							}
							else if((0x200000002000L & l) != 0L)
							{
								jjAddStates(68, 69);
							}
							else if((0x40000000400L & l) != 0L)
							{
								jjAddStates(70, 72);
							}
							else if((0x1000000010L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 28;
							}
							else if((0x800000008000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 25;
							}
							else if((0x8000000080000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 22;
							}
							else if((0x4000000040L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 19;
							}
							else if((0x800000008L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 12;
							}
							break;
						case 25:
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							if((0x800000008L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 24;
							}
							break;
						case 19:
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							if((0x2000000020L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 14;
							}
							break;
						case 22:
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							if((0x2000000020L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 21;
							}
							break;
						case 12:
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							if((0x800000008000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 11;
							}
							break;
						case 60:
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							if((0x200000002L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 61;
							}
							if((0x200000002L & l) != 0L)
							{
								jjCheckNAdd(59);
							}
							break;
						case 27:
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							if((0x800000008L & l) != 0L)
							{
								jjCheckNAdd(15);
							}
							break;
						case 61:
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							if((0x200000002000000L & l) != 0L)
							{
								jjCheckNAdd(15);
							}
							else if((0x4000000040000L & l) != 0L)
							{
								jjCheckNAdd(15);
							}
							break;
						case 163:
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							break;
						case 64:
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								if(kind > 93)
								{
									kind = 93;
								}
								jjCheckNAdd(157);
							}
							if((0x20000000200000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 65;
							}
							else if((0x1000000010000L & l) != 0L)
							{
								jjCheckNAdd(59);
							}
							break;
						case 1:
							jjAddStates(14, 16);
							break;
						case 5:
							if((0x400000004000L & l) != 0L && kind > 13)
							{
								kind = 13;
							}
							break;
						case 6:
							if((0x20000000200L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 5;
							}
							break;
						case 7:
							if((0x200000002L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 6;
							}
							break;
						case 8:
							if((0x4000000040000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 7;
							}
							break;
						case 9:
							if((0x10000000100000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 8;
							}
							break;
						case 13:
							if((0x800000008L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 12;
							}
							break;
						case 14:
							if((0x400000004L & l) != 0L)
							{
								jjCheckNAdd(15);
							}
							break;
						case 20:
							if((0x4000000040L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 19;
							}
							break;
						case 23:
							if((0x8000000080000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 22;
							}
							break;
						case 24:
							if((0x10000000100000L & l) != 0L)
							{
								jjCheckNAdd(15);
							}
							break;
						case 26:
							if((0x800000008000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 25;
							}
							break;
						case 29:
							if((0x1000000010L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 28;
							}
							break;
						case 31:
							jjAddStates(11, 13);
							break;
						case 33:
							if(curChar == 92)
							{
								jjstateSet[jjnewStateCnt++] = 32;
							}
							break;
						case 37:
							if((0x2000000020L & l) != 0L)
							{
								jjAddStates(73, 74);
							}
							break;
						case 52:
							if((0x40000000400L & l) != 0L)
							{
								jjAddStates(70, 72);
							}
							break;
						case 53:
							if((0x400000004000L & l) != 0L)
							{
								jjCheckNAdd(15);
							}
							break;
						case 54:
							if((0x200000002L & l) != 0L)
							{
								jjCheckNAdd(53);
							}
							break;
						case 55:
							if((0x20000000200000L & l) != 0L)
							{
								jjCheckNAdd(53);
							}
							break;
						case 56:
							if((0x100000001000L & l) != 0L)
							{
								jjCheckNAdd(15);
							}
							break;
						case 57:
							if((0x20000000200000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 56;
							}
							break;
						case 58:
							if((0x200000002000L & l) != 0L)
							{
								jjAddStates(68, 69);
							}
							break;
						case 59:
							if((0x4000000040000L & l) != 0L)
							{
								jjCheckNAdd(15);
							}
							break;
						case 62:
							if((0x200000002L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 61;
							}
							break;
						case 63:
							if((0x200000002L & l) != 0L)
							{
								jjAddStates(66, 67);
							}
							break;
						case 65:
							if((0x8000000080L & l) != 0L)
							{
								jjCheckNAdd(15);
							}
							break;
						case 66:
							if((0x20000000200000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 65;
							}
							break;
						case 70:
							jjCheckNAddTwoStates(70, 71);
							break;
						case 72:
						case 73:
							jjCheckNAddTwoStates(73, 71);
							break;
						case 75:
							if((0x400000004000L & l) != 0L)
							{
								jjAddStates(64, 65);
							}
							break;
						case 76:
							if((0x4000000040000L & l) != 0L && kind > 13)
							{
								kind = 13;
							}
							break;
						case 77:
							if((0x2000000020L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 76;
							}
							break;
						case 78:
							if((0x40000000400000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 77;
							}
							break;
						case 80:
							if((0x40000000400000L & l) != 0L)
							{
								jjCheckNAdd(15);
							}
							break;
						case 81:
							if((0x800000008000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 80;
							}
							break;
						case 84:
							if((0x400000004L & l) != 0L && kind > 82)
							{
								kind = 82;
							}
							break;
						case 85:
							if((0x2000000020L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 84;
							}
							break;
						case 86:
							if((0x4000000040L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 85;
							}
							break;
						case 87:
							if((0x1000000010000L & l) != 0L && kind > 82)
							{
								kind = 82;
							}
							break;
						case 88:
							if((0x2000000020L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 87;
							}
							break;
						case 89:
							if((0x8000000080000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 88;
							}
							break;
						case 90:
							if((0x10000000100000L & l) != 0L && kind > 82)
							{
								kind = 82;
							}
							break;
						case 91:
							if((0x800000008L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 90;
							}
							break;
						case 92:
							if((0x800000008000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 91;
							}
							break;
						case 93:
							if((0x40000000400000L & l) != 0L && kind > 82)
							{
								kind = 82;
							}
							break;
						case 94:
							if((0x800000008000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 93;
							}
							break;
						case 95:
							if((0x400000004000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 94;
							}
							break;
						case 96:
							if((0x800000008L & l) != 0L && kind > 82)
							{
								kind = 82;
							}
							break;
						case 97:
							if((0x2000000020L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 96;
							}
							break;
						case 98:
							if((0x1000000010L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 97;
							}
							break;
						case 99:
							if((0x40000000400L & l) != 0L)
							{
								jjAddStates(75, 77);
							}
							break;
						case 100:
							if((0x400000004000L & l) != 0L && kind > 82)
							{
								kind = 82;
							}
							break;
						case 101:
							if((0x200000002L & l) != 0L)
							{
								jjCheckNAdd(100);
							}
							break;
						case 102:
							if((0x20000000200000L & l) != 0L)
							{
								jjCheckNAdd(100);
							}
							break;
						case 103:
							if((0x100000001000L & l) != 0L && kind > 82)
							{
								kind = 82;
							}
							break;
						case 104:
							if((0x20000000200000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 103;
							}
							break;
						case 105:
							if((0x200000002000L & l) != 0L)
							{
								jjAddStates(78, 79);
							}
							break;
						case 106:
							if((0x4000000040000L & l) != 0L && kind > 82)
							{
								kind = 82;
							}
							break;
						case 107:
							if((0x200000002L & l) != 0L)
							{
								jjCheckNAdd(106);
							}
							break;
						case 108:
							if((0x200000002000000L & l) != 0L && kind > 82)
							{
								kind = 82;
							}
							break;
						case 109:
							if((0x200000002L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 108;
							}
							break;
						case 110:
							if((0x200000002L & l) != 0L)
							{
								jjAddStates(80, 81);
							}
							break;
						case 111:
							if((0x1000000010000L & l) != 0L)
							{
								jjCheckNAdd(106);
							}
							break;
						case 112:
							if((0x8000000080L & l) != 0L && kind > 82)
							{
								kind = 82;
							}
							break;
						case 113:
							if((0x20000000200000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 112;
							}
							break;
						case 115:
							if((0x400000004L & l) != 0L)
							{
								jjCheckNAdd(116);
							}
							break;
						case 120:
							if((0x2000000020L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 115;
							}
							break;
						case 121:
							if((0x4000000040L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 120;
							}
							break;
						case 122:
							if((0x1000000010000L & l) != 0L)
							{
								jjCheckNAdd(116);
							}
							break;
						case 123:
							if((0x2000000020L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 122;
							}
							break;
						case 124:
							if((0x8000000080000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 123;
							}
							break;
						case 125:
							if((0x10000000100000L & l) != 0L)
							{
								jjCheckNAdd(116);
							}
							break;
						case 126:
							if((0x800000008L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 125;
							}
							break;
						case 127:
							if((0x800000008000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 126;
							}
							break;
						case 128:
							if((0x40000000400000L & l) != 0L)
							{
								jjCheckNAdd(116);
							}
							break;
						case 129:
							if((0x800000008000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 128;
							}
							break;
						case 130:
							if((0x400000004000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 129;
							}
							break;
						case 131:
							if((0x800000008L & l) != 0L)
							{
								jjCheckNAdd(116);
							}
							break;
						case 132:
							if((0x2000000020L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 131;
							}
							break;
						case 133:
							if((0x1000000010L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 132;
							}
							break;
						case 134:
							if((0x40000000400L & l) != 0L)
							{
								jjAddStates(82, 84);
							}
							break;
						case 135:
							if((0x400000004000L & l) != 0L)
							{
								jjCheckNAdd(116);
							}
							break;
						case 136:
							if((0x200000002L & l) != 0L)
							{
								jjCheckNAdd(135);
							}
							break;
						case 137:
							if((0x20000000200000L & l) != 0L)
							{
								jjCheckNAdd(135);
							}
							break;
						case 138:
							if((0x100000001000L & l) != 0L)
							{
								jjCheckNAdd(116);
							}
							break;
						case 139:
							if((0x20000000200000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 138;
							}
							break;
						case 140:
							if((0x200000002000L & l) != 0L)
							{
								jjAddStates(85, 86);
							}
							break;
						case 141:
							if((0x4000000040000L & l) != 0L)
							{
								jjCheckNAdd(116);
							}
							break;
						case 142:
							if((0x200000002L & l) != 0L)
							{
								jjCheckNAdd(141);
							}
							break;
						case 143:
							if((0x200000002000000L & l) != 0L)
							{
								jjCheckNAdd(116);
							}
							break;
						case 144:
							if((0x200000002L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 143;
							}
							break;
						case 145:
							if((0x200000002L & l) != 0L)
							{
								jjAddStates(87, 88);
							}
							break;
						case 146:
							if((0x1000000010000L & l) != 0L)
							{
								jjCheckNAdd(141);
							}
							break;
						case 147:
							if((0x8000000080L & l) != 0L)
							{
								jjCheckNAdd(116);
							}
							break;
						case 148:
							if((0x20000000200000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 147;
							}
							break;
						case 156:
							if((0x7fffffe07fffffeL & l) == 0L)
							{
								break;
							}
							if(kind > 93)
							{
								kind = 93;
							}
							jjCheckNAddStates(61, 63);
							break;
						case 157:
							if((0x7fffffe87fffffeL & l) == 0L)
							{
								break;
							}
							if(kind > 93)
							{
								kind = 93;
							}
							jjCheckNAdd(157);
							break;
						case 158:
							if((0x7fffffe87fffffeL & l) != 0L)
							{
								jjCheckNAddTwoStates(158, 159);
							}
							break;
						case 160:
							if((0x1000000010L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 161;
							}
							break;
						case 161:
							if((0x100000001000L & l) != 0L)
							{
								jjstateSet[jjnewStateCnt++] = 162;
							}
							break;
						case 162:
							if((0x100000001000L & l) != 0L && kind > 96)
							{
								kind = 96;
							}
							break;
						default:
							break;
					}
				} while(i != startsAt);
			}
			else
			{
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop:
				do
				{
					switch(jjstateSet[--i])
					{
						case 1:
							if((jjbitVec0[i2] & l2) != 0L)
							{
								jjAddStates(14, 16);
							}
							break;
						case 31:
							if((jjbitVec0[i2] & l2) != 0L)
							{
								jjAddStates(11, 13);
							}
							break;
						case 70:
							if((jjbitVec0[i2] & l2) != 0L)
							{
								jjCheckNAddTwoStates(70, 71);
							}
							break;
						case 72:
						case 73:
							if((jjbitVec0[i2] & l2) != 0L)
							{
								jjCheckNAddTwoStates(73, 71);
							}
							break;
						default:
							break;
					}
				} while(i != startsAt);
			}
			if(kind != 0x7fffffff)
			{
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if((i = jjnewStateCnt) == (startsAt = 163 - (jjnewStateCnt = startsAt)))
			{
				return curPos;
			}
			try
			{
				curChar = input_stream.readChar();
			}
			catch(java.io.IOException e)
			{
				return curPos;
			}
		}
	}

	public void ReInit(ASCII_CharStream stream)
	{
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private final void ReInitRounds()
	{
		int i;
		jjround = 0x80000001;
		for(i = 163; i-- > 0; )
		{
			jjrounds[i] = 0x80000000;
		}
	}

	public void ReInit(ASCII_CharStream stream, int lexState)
	{
		ReInit(stream);
		SwitchTo(lexState);
	}

	public void SwitchTo(int lexState)
	{
		if(lexState >= 1 || lexState < 0)
		{
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		}
		else
		{
			curLexState = lexState;
		}
	}

	private final Token jjFillToken()
	{
		Token t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		String im = JJSTR_LITERAL_IMAGES[jjmatchedKind];
		t.image = (im == null) ? input_stream.GetImage() : im;
		t.beginLine = input_stream.getBeginLine();
		t.beginColumn = input_stream.getBeginColumn();
		t.endLine = input_stream.getEndLine();
		t.endColumn = input_stream.getEndColumn();
		return t;
	}

	public final Token getNextToken()
	{
		int kind;
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop:
		for(; ; )
		{
			try
			{
				curChar = input_stream.BeginToken();
			}
			catch(java.io.IOException e)
			{
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}

			try
			{
				input_stream.backup(0);
				while(curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
				{
					curChar = input_stream.BeginToken();
				}
			}
			catch(java.io.IOException e1)
			{
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if(jjmatchedKind != 0x7fffffff)
			{
				if(jjmatchedPos + 1 < curPos)
				{
					input_stream.backup(curPos - jjmatchedPos - 1);
				}
				if((JJTO_TOKEN[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
				{
					matchedToken = jjFillToken();
					return matchedToken;
				}
				else
				{
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try
			{
				input_stream.readChar();
				input_stream.backup(1);
			}
			catch(java.io.IOException e1)
			{
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if(curChar == '\n' || curChar == '\r')
				{
					error_line++;
					error_column = 0;
				}
				else
				{
					error_column++;
				}
			}
			if(!EOFSeen)
			{
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
					TokenMgrError.LEXICAL_ERROR);
		}
	}

}
