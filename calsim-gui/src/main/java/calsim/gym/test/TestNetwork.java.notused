package calsim.gym.test;
import calsim.gym.*;
import test.framework.*;
import java.io.IOException;
import java.util.*;
/**
 *
 *
 * @author Nicky Sandhu
 * @version $Id: TestNetwork.java,v 1.1.4.2 1999/02/07 01:24:01 nsandhu Exp $
 */
public class TestNetwork extends TestCase{
  static boolean DEBUG = true;
  Network network1;
  /**
    *
    */
  public TestNetwork(String name){
    super(name);
  }
  /**
    *
    */
  protected void setUp(){
    Network.DEBUG=false;
    try {
      network1 = Network.read("net1.csv");
    }catch(IOException ioe){
      System.out.println("Error reading : net1.csv");
    }
  }
  /**
    *
    */
  public void testNetwork1Read(){
  }
  /**
    *
    */
  public void testNetwork1Nodes(){
    if (DEBUG) System.out.println("# of nodes: " + network1.getNumberOfNodes());
    assert(network1.getNumberOfNodes() == 12);
    if (DEBUG) System.out.println("node # 5 : " + network1.getNode(5).getId());
    assert(network1.getNode(5).getId() == 5);
    if (DEBUG) System.out.println("node # 7 : " + network1.getNode("7").getId());
    assert(network1.getNode("7").getId() == 7);
    Node n5 = network1.getNode(5);
    assert(n5.getName().equals("NODE: 5"));
    assert(n5.getId()==5);
    Arc [] arcs5 = n5.getConnectingArcs();
    if (DEBUG) System.out.println("Number of arcs for node 5: " + arcs5.length);
    Hashtable ht5 = new Hashtable();
    for(int i=0; i < arcs5.length; i++){
      if (DEBUG) System.out.println("Node 5 has arc # " + arcs5[i].getName());
      ht5.put(arcs5[i].getName(),arcs5[i]);
    }
    assert(arcs5.length == 8);
    assert(ht5.containsKey("I5"));
    assert(ht5.containsKey("C5"));
    assert(ht5.containsKey("S5_1"));
    assert(ht5.containsKey("S5_2"));
    assert(ht5.containsKey("S5_3"));
    assert(ht5.containsKey("S5_4"));
    assert(ht5.containsKey("S5_5"));
    assert(ht5.containsKey("F5"));
  }
  /**
    *
    */
  public void testNetwork1Arcs(){
    if (DEBUG) System.out.println("# of arcs: " + network1.getNumberOfArcs());
    assert(network1.getNumberOfArcs()==35);
    //
    assert(network1.getArc("I1") instanceof InputArc);
    assert(network1.getArc("I1").getTypeName().equals("INPUT-ARC"));
    assert(network1.getArc("I1").getTypeAbbrev().equals("I"));
    assert(network1.getArc("I1").getUpstreamNode().equals(GymUtils.UNIVERSAL_BOUNDARY_NODE));
    assert(network1.getArc("I1").getDownstreamNode().equals(network1.getNode("1")));
    //
    assert(network1.getArc("I1") instanceof InputArc);
    assert(network1.getArc("I1").getTypeName().equals("INPUT-ARC"));
    assert(network1.getArc("I1").getTypeAbbrev().equals("I"));
    assert(network1.getArc("I1").getUpstreamNode().equals(GymUtils.UNIVERSAL_BOUNDARY_NODE));
    assert(network1.getArc("I1").getDownstreamNode().equals(network1.getNode("1")));
  }
  /**
    *
    */
  public void testGymUtilsNodes(){
    Node [] n1ups = GymUtils.getUpstreamNodes(network1.getNode(1));
    assert(n1ups == null);
    n1ups = GymUtils.getDownstreamNodes(network1.getNode(12));
    assert(n1ups == null);
    Node [] n1downs = GymUtils.getDownstreamNodes(network1.getNode(2));
    Hashtable ht1 = new Hashtable();
    for(int i=0; i < n1downs.length; i++) {
      ht1.put(new Integer(n1downs[i].getId()), n1downs[i]);
    }
    Enumeration keys = ht1.keys();
    if (DEBUG) System.out.println("Keys: ");
    while(keys.hasMoreElements()){
      if (DEBUG) System.out.print(keys.nextElement() + ",");
    }
    if (DEBUG) System.out.println();
    assert(n1downs.length == 6);
    assert(ht1.containsKey(new Integer(3)));
    assert(ht1.containsKey(new Integer(4)));
    assert(ht1.containsKey(new Integer(9)));
    assert(ht1.containsKey(new Integer(10)));
    assert(ht1.containsKey(new Integer(11)));
    assert(ht1.containsKey(new Integer(12)));
    //
    Node n9 = network1.getNode(9);
    n1downs = GymUtils.getDownstreamNodes(n9);
    assert(n1downs.length == 3);
    //
    ht1.clear();
    for(int i=0; i < n1downs.length; i++) {
      ht1.put(new Integer(n1downs[i].getId()), n1downs[i]);
    }
    keys = ht1.keys();
    if (DEBUG) System.out.println(n9.getName() + " Downstream nodes: ");
    while(keys.hasMoreElements()){
      if (DEBUG) System.out.print(keys.nextElement() + ",");
    }
    if (DEBUG) System.out.println();
    assert(ht1.containsKey(new Integer(12)));
    assert(ht1.containsKey(new Integer(11)));
    assert(ht1.containsKey(new Integer(10)));
    //
    n1ups = GymUtils.getUpstreamNodes(n9);
    assert(n1ups.length == 8);
    //
    ht1.clear();
    for(int i=0; i < n1ups.length; i++) {
      ht1.put(new Integer(n1ups[i].getId()), n1ups[i]);
    }
    keys = ht1.keys();
    if (DEBUG) System.out.println(n9 + " Downstream nodes: ");
    while(keys.hasMoreElements()){
      if (DEBUG) System.out.print(keys.nextElement() + ",");
    }
    if (DEBUG) System.out.println();
    assert(ht1.containsKey(new Integer(1)));
    assert(ht1.containsKey(new Integer(2)));
    assert(ht1.containsKey(new Integer(3)));
    assert(ht1.containsKey(new Integer(4)));
    assert(ht1.containsKey(new Integer(5)));
    assert(ht1.containsKey(new Integer(6)));
    assert(ht1.containsKey(new Integer(7)));
    assert(ht1.containsKey(new Integer(8)));
  }
  public void testGymUtilsArcs(){
    Arc [] uarcs, darcs;
    Hashtable ht = new Hashtable();
    //
    Arc arcC4 = network1.getArc("C4");
    uarcs = GymUtils.getUpstreamArcs(arcC4.getUpstreamNode());
    assert(uarcs.length == 6);
    darcs = GymUtils.getDownstreamArcs(arcC4.getDownstreamNode());
    assert(darcs.length == 6);
    //
    ht.clear();
    for(int i=0; i < uarcs.length; i++){
      ht.put(uarcs[i].getName(),uarcs[i]);
    }
    assert(ht.containsKey("I4"));
    assert(ht.containsKey("C3"));
    assert(ht.containsKey("C2"));
    assert(ht.containsKey("R3"));
    assert(ht.containsKey("C1"));
    assert(ht.containsKey("I1"));
    //
    ht.clear();
    for(int i=0; i < darcs.length; i++){
      ht.put(darcs[i].getName(),darcs[i]);
    }
    assert(ht.containsKey("C9"));
    assert(ht.containsKey("C10"));
    assert(ht.containsKey("C11a"));
    assert(ht.containsKey("C11b"));
    assert(ht.containsKey("D12a"));
    assert(ht.containsKey("D12b"));
  }
  public void testCompetingPaths(){
    Arc arc = network1.getArc("C11a");
    Arc [] arcs = GymUtils.getAllArcs(arc);
    for(int i=0; i < arcs.length; i++){
      System.out.println("arcs["+i+"] =  "+ arcs[i]);
    }
    testCompetingForArc("C11b",new String [] {"C11a","D2","D6",
						"S1_1","S1_2","S1_3","S1_4","S1_5","F1",
						"S5_1","S5_2","S5_3","S5_4","S5_5","F5"});
    testCompetingForArc("C11a",new String [] {"C11b","D2","D6",
						"S1_1","S1_2","S1_3","S1_4","S1_5","F1",
						"S5_1","S5_2","S5_3","S5_4","S5_5","F5"});
    testCompetingForArc("C9",new String [] {"D2","D6",
					      "S1_1","S1_2","S1_3","S1_4","S1_5","F1",
					      "S5_1","S5_2","S5_3","S5_4","S5_5","F5"});
    testCompetingForArc("C4",new String [] {"D2",
					      "S1_1","S1_2","S1_3","S1_4","S1_5","F1"});
    testCompetingForArc("D2",new String [] { "C11a","C11b","C2","C3","C4","C9","C10",
					      "S1_1","S1_2","S1_3","S1_4","S1_5","F1"});
    testCompetingForArc("S1_1",new String [] { "C11a","C11b","C2","C3","C4","C9","C10", "D2",
					      "S1_2","S1_3","S1_4","S1_5","F1"});
    testCompetingForArc("C6",new String [] {"D6",
					      "S5_1","S5_2","S5_3","S5_4","S5_5","F5"});
    testCompetingForArc("D6",new String [] {
					      "S5_1","S5_2","S5_3","S5_4","S5_5","F5"});
  }
  void testCompetingForArc(String arcName, String [] arcNames){
    //
    Arc arc = network1.getArc(arcName);
    if (DEBUG) System.out.println("Competing paths for arc: " + arc.getName());
    GymUtils.Path [] cpaths = GymUtils.getCompetingPaths(arc);
    Hashtable ht = new Hashtable();
    for(int i=0; i < cpaths.length; i++){
      for(int j=0; j < cpaths[i].arcs.length; j++){
	ht.put(cpaths[i].arcs[j].getName(), cpaths[i].arcs[j]);
      }
      if (DEBUG) System.out.println(cpaths[i]);
    }
    for(int i=0; i< arcNames.length; i++){
      assert(ht.containsKey(arcNames[i]));
    }
  }
}
