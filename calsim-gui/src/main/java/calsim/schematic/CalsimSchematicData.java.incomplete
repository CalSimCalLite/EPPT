/*
    Copyright (C) 1996, 1997, 1998 State of California, Department of 
    Water Resources.

    VISTA : A VISualization Tool and Analyzer. 
	Version 1.0beta
	by Nicky Sandhu
    California Dept. of Water Resources
    Division of Planning, Delta Modeling Section
    1416 Ninth Street
    Sacramento, CA 95814
    (916)-653-7552
    nsandhu@water.ca.gov

    Send bug reports to nsandhu@water.ca.gov

    This program is licensed to you under the terms of the GNU General
    Public License, version 2, as published by the Free Software
    Foundation.

    You should have received a copy of the GNU General Public License
    along with this program; if not, contact Dr. Francis Chung, below,
    or the Free Software Foundation, 675 Mass Ave, Cambridge, MA
    02139, USA.

    THIS SOFTWARE AND DOCUMENTATION ARE PROVIDED BY THE CALIFORNIA
    DEPARTMENT OF WATER RESOURCES AND CONTRIBUTORS "AS IS" AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE CALIFORNIA
    DEPARTMENT OF WATER RESOURCES OR ITS CONTRIBUTORS BE LIABLE FOR
    ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
    OR SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR
    BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
    USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
    DAMAGE.

    For more information about VISTA, contact:

    Dr. Francis Chung
    California Dept. of Water Resources
    Division of Planning, Delta Modeling Section
    1416 Ninth Street
    Sacramento, CA  95814
    916-653-5601
    chung@water.ca.gov

    or see our home page: http://wwwdelmod.water.ca.gov/

    Send bug reports to nsandhu@water.ca.gov or call (916)-653-7552

*/
package calsim.schematic;
import vista.graph.*;
import vista.set.*;
import java.io.*;
import java.awt.*;
import java.util.*;
/**
 * A schematic for representation of Calsim elements
 *
 * @author Nicky Sandhu
 * @version $Id: CalsimSchematicData.java,v 1.1.2.2 1999/05/25 18:03:09 nsandhu Exp $
 */
public class CalsimSchematicData implements CalsimSchematicDataModel{
  /**
    * store nodes and arcs
    */
  private Vector _nodes, _arcs;
  public double _xmax, _xmin, _ymax, _ymin;
  private boolean _minExplicitlySet = false;
  private boolean _maxExplicitlySet = false;
  public int _index;
  public Object _obj;
  /**
    *
    */
  private void initializeMinMax(){
    if ( _minExplicitlySet && _maxExplicitlySet ) return;
    //
    if ( ! _minExplicitlySet ) {
      _xmin = Float.MAX_VALUE;
      _ymin = Float.MAX_VALUE;
    }
    //
    if ( ! _maxExplicitlySet ) {
      _xmax = Float.MIN_VALUE;
      _ymax = Float.MIN_VALUE;
    }
    for(Enumeration e = _nodes.elements(); e.hasMoreElements();){
      DefaultSymbolData sd = (DefaultSymbolData) e.nextElement();
      if ( ! _maxExplicitlySet ) {
	_xmax = Math.max(_xmax,sd.anchorPoint.x);
	_ymax = Math.max(_ymax,sd.anchorPoint.y);
	_xmax = Math.max(_xmax,sd.otherPoint.x);
	_ymax = Math.max(_ymax,sd.otherPoint.y);
      }
      if ( ! _minExplicitlySet ) {
	_xmin = Math.min(_xmin,sd.anchorPoint.x);
	_ymin = Math.min(_ymin,sd.anchorPoint.y);
	_xmin = Math.min(_xmin,sd.otherPoint.x);
	_ymin = Math.min(_ymin,sd.otherPoint.y);
      }
    }
    for(Enumeration e = _arcs.elements(); e.hasMoreElements();){
      DefaultSymbolData sd = (DefaultSymbolData) e.nextElement();
      if ( ! _maxExplicitlySet ) {
	_xmax = Math.max(_xmax,sd.anchorPoint.x);
	_ymax = Math.max(_ymax,sd.anchorPoint.y);
	_xmax = Math.max(_xmax,sd.otherPoint.x);
	_ymax = Math.max(_ymax,sd.otherPoint.y);
      }
      if ( ! _minExplicitlySet ) {
	_xmin = Math.min(_xmin,sd.otherPoint.x);
	_ymin = Math.min(_ymin,sd.otherPoint.y);
	_xmin = Math.min(_xmin,sd.anchorPoint.x);
	_ymin = Math.min(_ymin,sd.anchorPoint.y);
      }
    }
    if ( ! _minExplicitlySet ) {
      _xmin = 0.85*_xmin;
      _ymin = 0.85*_ymin;
    }
    if ( ! _maxExplicitlySet ) {
      _xmax = 1.15*_xmax;
      _ymax = 1.15*_ymax;
    }
  }
  /**
    *
    */
  private void readSchematic(String file){
    try {
      LineNumberReader r = new LineNumberReader(new FileReader(file));
      _nodes = new Vector();
      _arcs = new Vector();
      String line = null;
      Font font = new Font("Times Roman",Font.BOLD,12);
      Color flowColor = Color.blue.brighter(), 
	inflowColor = Color.cyan.darker(), 
	demandColor = Color.yellow.darker().darker(),
	storageColor = Color.blue,
	nodeColor = Color.green.darker();
      Color nodeLabelColor = Color.yellow.brighter();
      Color flowLabelColor = Color.yellow.darker().darker();
      while (true){
	line = r.readLine();
	if ( line == null ) break; // end of file
	line = line.trim();
	if ( line.indexOf("#") >= 0 ) continue; // skip comment line
	if ( line.indexOf("Label") >= 0 ) continue; // skip header line
	if ( line.indexOf("schematic.min") >= 0 ||
	     line.indexOf("schematic.max") >= 0 ){
	  boolean min = false;
	  if ( line.indexOf("schematic.min") >= 0 ) min = true;
	  int eqIndex = line.indexOf("=");
	  if ( eqIndex < 0 ) {
	    System.err.println("Where's the equal to sign for schematic."+ (min?"min":"max") +"?");
	  }else{
	    String minStr = line.substring(eqIndex+1,line.length());
	    int commaIndex = minStr.indexOf(",");
	    if ( commaIndex < 0 ) {
	      System.err.println("Need a comma to separate x from y in the schematic "+ (min?"min":"max") );
	    }else{
	      if ( min ){
		_xmin = new Double(minStr.substring(0,commaIndex)).doubleValue();
		_ymin = new Double(minStr.substring(commaIndex+1,minStr.length())).doubleValue();
		_minExplicitlySet = true;
	      } else {
		_xmax = new Double(minStr.substring(0,commaIndex)).doubleValue();
		_ymax = new Double(minStr.substring(commaIndex+1,minStr.length())).doubleValue();
		_maxExplicitlySet = true;
	      }
	    }
	  }
	  continue; // skip reset
	}
	StringTokenizer st = new StringTokenizer(line);
	if ( st.countTokens() != 6 ) continue; // skip blank lines or others
	String label = st.nextToken();
	String symType = st.nextToken();
	double x1 = new Double(st.nextToken()).doubleValue();
	double y1 = new Double(st.nextToken()).doubleValue();
	double x2 = new Double(st.nextToken()).doubleValue();
	double y2 = new Double(st.nextToken()).doubleValue();
	DefaultSymbolData data = new DefaultSymbolData();
	if ( symType.equals("storage") ){
	  LabeledSymbol labelSym = 
	    new LabeledSymbol(label,SymbolFactory.createTriangle(true,storageColor,20));
	  labelSym.getTextLine().setFont(font);
	  labelSym.getTextLine().setForegroundColor(nodeLabelColor);
	  data.ge = labelSym;
	  data.anchorPoint = new DoublePoint(x1,y1);
	  data.otherPoint = new DoublePoint(x1+x2,y1-y2);
	  data.ref = symType + " " + label;
	  _nodes.addElement(data);
	}else if ( symType.equals("junction") ){
	  LabeledSymbol labelSym = new LabeledSymbol(label,SymbolFactory.createCircle(true,nodeColor,155));
	  labelSym.getTextLine().setFont(font);
	  labelSym.getTextLine().setForegroundColor(nodeLabelColor);
	  data.ge = labelSym;
	  data.anchorPoint = new DoublePoint(x1,y1);
	  data.otherPoint = new DoublePoint(x2+x1,y1-y2);
	  data.ref = symType + " " + label;
	  _nodes.addElement(data);
	}else if ( symType.indexOf("flow") >=0 || symType.indexOf("demand") >= 0){
	  LabeledLine lline = new LabeledLine(label);
	  lline.getTextLine().setFont(font);
	  lline.getTextLine().setForegroundColor(flowLabelColor);
	  LineElement le = lline.getLineElement();
	  if ( symType.equals("inflow") ){
	    le.setForegroundColor(inflowColor);
	  } else if ( symType.equals("flow") ){
	    le.setForegroundColor(flowColor);
	  } else if ( symType.equals("demand")){
	    le.setForegroundColor(demandColor);
	  } else {
	    continue;
	  }
	  data.ge = lline;
	  data.anchorPoint = new DoublePoint(x1,y1);
	  data.otherPoint = new DoublePoint(x2,y2);
	  data.ref = symType + " " + label;
	  _arcs.addElement(data);
	}else {
	  System.err.println("Unrecognized keyword for symbol: " + symType);
	  continue;
	}
      }
    }catch(IOException ioe){
      System.err.println("Error reading " + file);
      System.err.println(ioe);
    }
  }
  /**
    *
    */
  public CalsimSchematicData(String datafile){
    // read schematic from file
    readSchematic(datafile);
    // get x max/min and y max/min
    initializeMinMax();
  }
  /**
    * gets the maximum value for the x axis
    */
  public double getXMax(){
    return _xmax;
  }
  /**
    * gets the maximum value for the x axis
    */
  public double getXMin(){
    return _xmin;
  }
  /**
    * gets the maximum value for the x axis
    */
  public double getYMax(){
    return _ymax;
  }
  /**
    * gets the maximum value for the x axis
    */
  public double getYMin(){
    return _ymin;
  }
  /**
    * resets the data iterator to beginning of curve
    */
  public void reset(){
    _index=0;
  }
  /**
    * gets the next symbol data
    */
  public CalsimSymbolData nextSymbolData(){
    CalsimSymbolData sd = null;
    if ( _index < _arcs.size()){
      sd = (CalsimSymbolData) _arcs.elementAt(_index);
    } else {
      sd = (CalsimSymbolData) _nodes.elementAt(_index-_arcs.size());
    }
    if ( sd == null ) return null;
    _index++;
    return sd;
  }
  /**
    * @return true while has more  points on curve
    */
  public boolean hasMoreSymbols(){
    return (_index < _nodes.size() + _arcs.size());
  }
  /**
    * gets the title text for this schematic
    */
  public String getTitleText(){
    return "CALSIM Schematic";
  }
  /**
    * sets the title text for this schematic
    */
  public void setTitleText(String str){
    // do nothing for now
  }
  /**
    *
    */
  public class DefaultSymbolData implements CalsimSymbolData{
    GraphicElement ge;
    DoublePoint anchorPoint, otherPoint;
    Object ref;
    /**
      * the symbol representing the data
      */
    public GraphicElement getGraphicElement(){
      return ge;
    }
    /**
      * the anchor point or upper left corner of bounds
      */
    public DoublePoint getAnchorPoint(){
      return anchorPoint;
    }
    /**
      * the other point or lower left corner of bounds
      */
    public DoublePoint getOtherPoint(){
      return otherPoint;
    }
    /**
      * the reference object to be associated with this element.
      * This is the data or identifier object.
      */
    public Object getReferenceObject(){
      return ref;
    }
    /**
      * set the reference object for this element.
      */
    public void setReferenceObject(Object obj){
      ref = obj;
    }
  }
}
